"""2025-02-27T14:46:30.989436_create_root_user

Revision ID: 08f2636195ed
Revises: 2c6ee729e69c
Create Date: 2025-02-27 14:46:31.178419

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import create_engine
from sqlalchemy.orm import Session, sessionmaker

from database.config import DB_CONFIG
from database.model import Model
from database.engine import get_session
from services.personality.models import (
    UserORM,
    ROOT_USER,
    GroupORM,
    BaseGroupsEnum,
    RoleORM,
    RolesEnum,
    UserGroupRoleORM,
)

# revision identifiers, used by Alembic.
revision: str = "08f2636195ed"
down_revision: Union[str, None] = "3c84a7a33f5d"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    engine = create_engine(DB_CONFIG.url)
    session_class = sessionmaker(engine)
    with session_class() as session:
        user_data = ROOT_USER.model_dump()
        password = user_data.pop("password", None)
        user = UserORM(**user_data)
        user.set_password(password)
        group = session.query(GroupORM).filter_by(name=BaseGroupsEnum.ADMINISTRATORS.value[0]).first()
        roles = session.query(RoleORM).filter(RoleORM.name.in_([item.value[0] for item in RolesEnum])).all()
        session.add(user)
        session.flush()
        for role in roles:
            user_group_role = UserGroupRoleORM(user_id=user.id, group_id=group.id, role_id=role.id)
            session.add(user_group_role)
        session.commit()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    engine = create_engine(DB_CONFIG.url)
    session_class = sessionmaker(engine)
    with session_class() as session:
        user = session.query(UserORM).filter_by(username=ROOT_USER.username).first()
        session.query(UserGroupRoleORM).filter_by(user_id=user.id).delete()
        session.delete(user)

        session.commit()
